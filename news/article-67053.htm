<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hiddifynextnode.github.io/news/article-67053.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>「BUAA OO Unit 2 HW8」第二单元总结_在线工具</title>
        <meta name="description" content="目录   「BUAA OO Unit 2 HW8」第二单元总结  Part 0 前言  Part 1 第五次作业  1.1 作业要求 1.2 架构设计 1.3 协作图 1.4 调度分析  1.5 bu" />
        <link rel="icon" href="/assets/website/img/hiddifynextnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="HiddifyNextNode免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hiddifynextnode.github.io/news/article-67053.htm" />
    <meta property="og:site_name" content="HiddifyNextNode免费节点官网" />
    <meta property="og:title" content="「BUAA OO Unit 2 HW8」第二单元总结_在线工具" />
    <meta property="og:image" content="https://hiddifynextnode.github.io/uploads/20240806/7e8f7a5fa00d61b5859d9370106b94be.webp" />
        <meta property="og:release_date" content="2025-03-04T10:14:21" />
    <meta property="og:updated_time" content="2025-03-04T10:14:21" />
        <meta property="og:description" content="目录   「BUAA OO Unit 2 HW8」第二单元总结  Part 0 前言  Part 1 第五次作业  1.1 作业要求 1.2 架构设计 1.3 协作图 1.4 调度分析  1.5 bu" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="「BUAA OO Unit 2 HW8」第二单元总结_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!--/google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,700;1,400;1,600&display=swap" rel="stylesheet">
    <!--//google-fonts -->
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/hiddifynextnode/style-liberty.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FW3J4WPCDW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FW3J4WPCDW');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--/Header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light stroke py-lg-0">
                <a class="navbar-brand pe-xl-5 pe-lg-4" href="/">
                                    <span class="sublog">Hiddify Next</span> Node</span>
                                </a>
                <button class="navbar-toggler collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#navbarScroll" aria-controls="navbarScroll" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarScroll">
                    <ul class="navbar-nav me-lg-auto my-2 my-lg-0 navbar-nav-scroll">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//Header-->
    <!-- breadcrumb -->
    <section class="w3l-about-breadcrumb">
        <div class="breadcrumb-bg breadcrumb-bg-about">
            <div class="container py-lg-5 py-sm-4">
                <div class="w3breadcrumb-gids text-center">
                    <div class="w3breadcrumb-info mt-5">
                        <h1 class="w3ltop-title pt-4">「BUAA OO Unit 2 HW8」第二单元总结_在线工具</h1>
                        <ul class="breadcrumbs-custom-path">
                            <li><a href="/">首页</a></li>
                            <li><a href="/news/"><span class="fas fa-angle-double-right mx-2"></span>  新闻资讯</a></li>
                            <li class="active"><span class="fas fa-angle-double-right mx-2"></span> 正文 </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </section>

    
    <!--/tabs-faqs-->
    <section class="w3l-products w3l-faq-block py-5" id="projects">
        <div class="container py-md-5 py-2">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> </p> <div class="toc"> <div class="toc-container-header">目录</div> <ul> <li> <a href="#buaa-oo-unit-2-hw8%E7%AC%AC%E4%BA%8C%E5%8D%95%E5%85%83%E6%80%BB%E7%BB%93"  rel="nofollow">「BUAA OO Unit 2 HW8」第二单元总结</a></p> <ul> <li><a href="#part-0-%E5%89%8D%E8%A8%80"  rel="nofollow">Part 0 前言</a></li> <li> <a href="#part-1-%E7%AC%AC%E4%BA%94%E6%AC%A1%E4%BD%9C%E4%B8%9A"  rel="nofollow">Part 1 第五次作业</a></p> <ul> <li><a href="#11-%E4%BD%9C%E4%B8%9A%E8%A6%81%E6%B1%82"  rel="nofollow">1.1 作业要求</a></li> <li><a href="#12-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1"  rel="nofollow">1.2 架构设计</a></li> <li><a href="#13-%E5%8D%8F%E4%BD%9C%E5%9B%BE"  rel="nofollow">1.3 协作图</a></li> <li><a href="#14-%E8%B0%83%E5%BA%A6%E5%88%86%E6%9E%90"  rel="nofollow">1.4 调度分析</a></li> <li> <a href="#15-bug%E5%88%86%E6%9E%90"  rel="nofollow">1.5 bug分析</a></p> <ul> <li> <a href="#%E8%87%AA%E5%B7%B1bug"  rel="nofollow">自己bug</a></p> <ul> <li><a href="#%E4%BD%BF%E7%94%A8%E4%BA%86run%E8%80%8C%E4%B8%8D%E6%98%AFstart%E6%96%B9%E6%B3%95%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B"  rel="nofollow">使用了<code>run</code>而不是<code>start</code>方法启动线程</a></li> </ul> </li> <li><a href="#%E5%88%AB%E4%BA%BAbug"  rel="nofollow">别人bug</a></li> </ul> </li> <li> <a href="#16-%E5%AF%B9%E8%B1%A1%E5%A4%B4%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5"  rel="nofollow">1.6 对象头、锁和同步</a></p> <ul> <li><a href="#%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E7%BB%93%E6%9E%84"  rel="nofollow">对象实例结构</a></li> <li><a href="#%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5"  rel="nofollow">锁和同步</a></li> <li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"  rel="nofollow">参考资料</a></li> <li> <a href="#%E5%AF%B9%E8%B1%A1%E9%94%81"  rel="nofollow">对象锁</a></p> <ul> <li><a href="#%E6%96%B9%E6%B3%95%E9%94%81%E5%BD%A2%E5%BC%8F"  rel="nofollow">方法锁形式</a></li> <li><a href="#%E4%BB%A3%E7%A0%81%E5%9D%97%E5%BD%A2%E5%BC%8F"  rel="nofollow">代码块形式</a></li> </ul> </li> <li> <a href="#%E7%B1%BB%E9%94%81"  rel="nofollow">类锁</a></p> <ul> <li><a href="#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%BD%A2%E5%BC%8F"  rel="nofollow">静态方法形式</a></li> <li><a href="#%E4%BB%A3%E7%A0%81%E5%9D%97%E5%BD%A2%E5%BC%8F-1"  rel="nofollow">代码块形式</a></li> </ul> </li> <li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99-1"  rel="nofollow">参考资料</a></li> </ul> </li> <li> <a href="#17-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%B0%81%E8%A3%85%E5%AE%89%E5%85%A8%E8%BE%93%E5%87%BA%E7%B1%BB"  rel="nofollow">1.7 线程安全——封装安全输出类</a></p> <ul> <li><a href="#%E6%AF%8F%E6%AC%A1%E8%B0%83%E7%94%A8%E5%8A%A0%E9%94%81"  rel="nofollow">每次调用加锁</a></li> <li> <a href="#%E5%B0%81%E8%A3%85%E8%BE%93%E5%87%BA%E7%B1%BB"  rel="nofollow">封装输出类</a></p> <ul> <li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F"  rel="nofollow">单例模式</a></li> <li><a href="#%E5%B0%81%E8%A3%85"  rel="nofollow">封装</a></li> <li><a href="#%E5%8C%96%E7%AE%80"  rel="nofollow">化简</a></li> </ul> </li> </ul> </li> </ul> </li> <li> <a href="#part-2-%E7%AC%AC%E5%85%AD%E6%AC%A1%E4%BD%9C%E4%B8%9A"  rel="nofollow">Part 2 第六次作业</a></p> <ul> <li><a href="#21-%E4%BD%9C%E4%B8%9A%E8%A6%81%E6%B1%82"  rel="nofollow">2.1 作业要求</a></li> <li> <a href="#22-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1"  rel="nofollow">2.2 架构设计</a></p> <ul> <li><a href="#%E6%96%B0%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90"  rel="nofollow">新需求分析</a></li> <li><a href="#%E8%AF%B7%E6%B1%82%E7%BE%A4"  rel="nofollow">请求群</a></li> <li><a href="#%E7%B1%BB%E8%99%9A%E6%8B%9F%E7%A9%BA%E9%97%B4"  rel="nofollow">类虚拟空间</a></li> <li><a href="#%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A0%B8%E5%BF%83%E7%90%86%E5%BF%B5"  rel="nofollow">设计的核心理念</a></li> <li><a href="#%E8%AF%BB%E5%86%99%E9%94%81"  rel="nofollow">读写锁</a></li> </ul> </li> <li><a href="#23-%E5%8D%8F%E4%BD%9C%E5%9B%BE"  rel="nofollow">2.3 协作图</a></li> <li> <a href="#24-%E8%B0%83%E5%BA%A6%E5%88%86%E6%9E%90"  rel="nofollow">2.4 调度分析</a></p> <ul> <li><a href="#%E6%A8%AA%E5%90%91look"  rel="nofollow">横向LOOK</a></li> <li><a href="#%E8%87%AA%E7%94%B1%E7%AB%9E%E4%BA%89"  rel="nofollow">自由竞争</a></li> </ul> </li> <li> <a href="#25-bug%E5%88%86%E6%9E%90"  rel="nofollow">2.5 bug分析</a></p> <ul> <li> <a href="#%E8%87%AA%E5%B7%B1bug-1"  rel="nofollow">自己bug</a></p> <ul> <li><a href="#%E7%A9%BA%E5%BC%80%E5%85%B3%E9%97%A8"  rel="nofollow">空开关门</a></li> </ul> </li> <li> <a href="#%E5%88%AB%E4%BA%BAbug-1"  rel="nofollow">别人bug</a></p> <ul> <li><a href="#%E5%BF%98%E8%AE%B0%E5%85%B3%E9%97%A8"  rel="nofollow">忘记关门</a></li> <li><a href="#rtle"  rel="nofollow">RTLE</a></li> </ul> </li> </ul> </li> </ul> </li> <li> <a href="#part-3-%E7%AC%AC%E4%B8%83%E6%AC%A1%E4%BD%9C%E4%B8%9A"  rel="nofollow">Part 3 第七次作业</a></p> <ul> <li><a href="#31-%E4%BD%9C%E4%B8%9A%E8%A6%81%E6%B1%82"  rel="nofollow">3.1 作业要求</a></li> <li> <a href="#32-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%96%B0%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90"  rel="nofollow">3.2 架构设计与新需求分析</a></p> <ul> <li><a href="#%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7"  rel="nofollow">支持自定义属性</a></li> <li><a href="#%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%AF%E8%BE%BE%E6%A5%BC%E5%BA%A7"  rel="nofollow">支持自定义可达楼座</a></li> <li><a href="#%E6%94%AF%E6%8C%81%E6%8D%A2%E4%B9%98"  rel="nofollow">支持换乘</a></li> </ul> </li> <li><a href="#33-%E5%8D%8F%E4%BD%9C%E5%9B%BE"  rel="nofollow">3.3 协作图</a></li> <li><a href="#34-%E8%B0%83%E5%BA%A6%E5%88%86%E6%9E%90"  rel="nofollow">3.4 调度分析</a></li> <li> <a href="#35-bug%E5%88%86%E6%9E%90"  rel="nofollow">3.5 bug分析</a></p> <ul> <li> <a href="#%E8%87%AA%E5%B7%B1bug-2"  rel="nofollow">自己bug</a></p> <ul> <li><a href="#ctle"  rel="nofollow">CTLE</a></li> <li><a href="#%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9D%9F"  rel="nofollow">线程结束</a></li> </ul> </li> </ul> </li> <li> <a href="#%E5%88%AB%E4%BA%BAbug-2"  rel="nofollow">别人bug</a></p> <ul> <li> <ul> <li><a href="#rtle-1"  rel="nofollow">RTLE</a></li> </ul> </li> </ul> </li> </ul> </li> <li> <a href="#part-4-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A"  rel="nofollow">Part 4 多线程心得体会</a></p> <ul> <li><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86"  rel="nofollow">多线程基本原理</a></li> <li><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8Bdebug"  rel="nofollow">多线程debug</a></li> <li><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%9D%E7%BB%B4"  rel="nofollow">多线程思维</a></li> <li><a href="#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%B0%81%E8%A3%85"  rel="nofollow">线程安全封装</a></li> </ul> </li> <li> <a href="#part-5-tricks"  rel="nofollow">Part 5 Tricks</a></p> <ul> <li> <a href="#%E6%95%B0%E6%8D%AE%E6%8A%95%E5%96%82%E5%8C%85%E4%BD%BF%E7%94%A8%E6%89%B9%E5%A4%84%E7%90%86%E4%BB%A3%E6%9B%BF%E6%89%8B%E5%8A%A8%E8%BE%93%E5%85%A5cmd%E5%91%BD%E4%BB%A4"  rel="nofollow">数据投喂包使用批处理代替手动输入cmd命令</a></p> <ul> <li><a href="#runbat"  rel="nofollow"><code>run.bat</code></a></li> </ul> </li> <li><a href="#%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%AF%84%E6%B5%8B%E6%9C%BA"  rel="nofollow">随机数据评测机</a></li> <li><a href="#plantuml%E7%BB%98%E5%9B%BE"  rel="nofollow">plantUML绘图</a></li> </ul> </li> <li><a href="#part-6-%E5%9B%9E%E9%A1%BE%E4%B8%8E%E5%B1%95%E6%9C%9B"  rel="nofollow">Part 6 回顾与展望</a></li> </ul> </li> </ul> </div> <h2 id="part-0-前言">Part 0 前言</h2> <p>第二单元多线程已经告一段落，本单元中我收获颇丰，在这里再次总结记录。</p> <p>本篇博客将分为以下几个部分，读者可自取所需：</p> <ul> <li><strong>Part 1 第五次作业</strong></li> <li><strong>Part 2 第六次作业</strong></li> <li><strong>Part 3 第七次作业</strong></li> <li><strong>Part 4 多线程心得体会</strong></li> <li><strong>Part 5 Tricks</strong></li> <li><strong>Part 6 展望</strong></li> </ul> <p>其中，为了阅读顺畅，我将<strong>对象头、锁和同步</strong>以及<strong>线程安全——封装安全输出类</strong>两个模块放在<strong>Part 1 第五次作业</strong>的后半部分介绍，但这两块内容贯穿始终，请读者留意。</p> <hr> <h2 id="part-1-第五次作业">Part 1 第五次作业</h2> <h3 id="11-作业要求">1.1 作业要求</h3> <p>模拟实现支持五座楼，每座十层，且每座有一台电梯可以在本座所有楼层间运行的多线程实时电梯系统。</p> <h3 id="12-架构设计">1.2 架构设计</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/2975e05d0c05d8ea24093b532bd42cdb.jpg" alt="「BUAA OO Unit 2 HW8」第二单元总结_在线工具"></p> <p>第五次作业类图如上图示。</p> <p><code>InputThread</code>负责输入，并将对应的<code>Passenger</code>委派给对应的楼座的<code>WaitTable</code>，对应楼座的电梯<code>Elevator</code>通过对应的<code>WaitTable</code>获取请求。这里，我还额外将存储<code>Passenger</code>的容器封装为一个<code>PassengerQueue</code>类，这将有利于未来迭代时更换实际上的容器而不更改<code>PassengerQueue</code>的接口。</p> <p>这次作业中我采用了生产者-消费者模型，具体如下：</p> <ul> <li>生产者：输入线程<code>InputThread</code> </li> <li>托盘：候乘表<code>WaitTable</code> </li> <li>消费者：电梯线程<code>Elevator</code> </li> </ul> <p>运行流程：生产者输入线程获取输入，按照乘客类别不同，分别投放到对应的楼座的托盘候乘表<code>WaitTable</code>，消费者电梯线程自己运行，同时扫描其所在的楼座的<code>WaitTable</code>，按照其自身调度队候乘表中乘客采取接客<code>getPassenger</code>方法。</p> <p>结束标识：输入得到<code>ctrl + D</code>结束信号时，调用所有<code>WaitTable</code>的<code>setEnd()</code>方法，首先结束掉同时满足对应楼座候乘表没有未运送乘客且电梯内部没有乘客的电梯线程；对于此时还在运行或不能被停止的电梯线程，<code>WaitTable</code>提供方法<code>isEnd()</code>，电梯可以通过该方法知道输入信号截止，并最终在对应楼座候乘表没有未运送乘客且电梯内没有乘客的时刻停止自身线程。</p> <h3 id="13-协作图">1.3 协作图</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/02765a2d9894e3777933b74acb627132.jpg" alt="「BUAA OO Unit 2 HW8」第二单元总结_在线工具"></p> <h3 id="14-调度分析">1.4 调度分析</h3> <p>在第一单元中，任务需求较为简单。考虑到单元训练的重点是多线程设计以及为未来迭代做好准备，我秉持less is more的想法，在比较多种调度策略后最终选择了LOOK算法，其在满足较高的性能的同时实现复杂度较低，这意味着更低的出bug概率以及更好的可扩展性。考虑到网上资料中并没有详细描述LOOK具体原理和实现的文章，我这里简单谈谈我的<strong>个人认知</strong>，可做参考。</p> <ol> <li> <p>当电梯有乘客时，以乘客中<strong>目标楼层距离当前楼层最远</strong>的请求为主请求确定目标楼层</p> </li> <li> <p>当电梯没有乘客时，首先按照原方向，寻找<strong>距离当前楼层最远的有请求的</strong>楼层，找到则确定为目标楼层，这次寻找最终结果<strong>有可能会是当前层</strong>。如果寻找无果（沿方向的所有层包括本层都没有请求）则改变方向，继续寻找。若最后没有找到，则可以返回一个标志结束的值表示电梯进入空闲。</p> </li> </ol> <h3 id="15-bug分析">1.5 bug分析</h3> <h4 id="自己bug">自己bug</h4> <p>本次作业在中测、强测和互测中没有出现bug。最终得分为93.7485，可以看到性能分得分表现欠佳。尽管得分不高，但是本次作业遵循了鲁棒性和可扩展性的要求，这为后续迭代开发和维护带来了便利。</p> <p>但是在中测的前几次提交，分别出现了一些bug，以下分别介绍：</p> <h5 id="使用了run而不是start方法启动线程">使用了<code>run</code>而不是<code>start</code>方法启动线程</h5> <p>这是一个非常低级的错误，产生的原因是第一次写多线程没有经验。值得注意的是，<code>run</code>方法是一个方法，其可以被调用这是自然的，但是多线程中应当采用<code>start</code>来启动线程。</p> <h4 id="别人bug">别人bug</h4> <p>在互测中，我主要通过评测机用大范围随机数据进行检验，没有检查出错误，但是有同学被其他屋内同学hack到，这意味着随机数据的局限性。</p> <h3 id="16-对象头锁和同步">1.6 对象头、锁和同步</h3> <p>荣文戈老师上课介绍了对象头的相关知识，查阅相关资料后简要整理如下：</p> <h4 id="对象实例结构">对象实例结构</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/bc59c2f2729f540eeaa0dcd32472a1cd.jpg" alt="「BUAA OO Unit 2 HW8」第二单元总结_在线工具"></p> <p>Java的实例对象储存在Heap中，其结构如上图示。</p> <h4 id="锁和同步">锁和同步</h4> <p>如上图示，对象头部分储存的信息包含<strong>最近持有该对象锁的线程ID</strong>。而我们使用的<code>synchronized</code>包含三种情况，分别是：</p> <ol> <li> <p>修饰实例方法： 作用于当前对象实例加锁，进入同步代码前要获得<strong>当前对象实例的锁</strong></p> <pre><code class="language-java">synchronized void method() {   // CODE } </code></pre> </li> <li> <p>修饰静态方法：给当前类加锁，会作用于类的所有对象实例，进入同步代码前要获得<strong>当前 class 的锁</strong>。</p> <p>class信息存储在method area中。</p> <pre><code class="language-java">synchronized void staic method() {   // TODO } </code></pre> </li> <li> <p>修饰代码块：指定加锁对象，对给定对象/类加锁。<code>synchronized(this|object)</code> 表示进入同步代码库前要获得<strong>给定对象的锁</strong>。<code>synchronized(类.class)</code> 表示进入同步代码前要获得 <strong>当前 class 的锁</strong></p> <pre><code class="language-java">synchronized(this) {   // TODO } </code></pre> </li> </ol> <p>通过以上资料，我们可以更加清楚加锁是如何进行和记录的。</p> <h4 id="参考资料">参考资料</h4> <ol> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/three-fighter/p/14396208.html"  target="_blank"  rel="nofollow">synchronized详解</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jianshu.com/p/5116317e6e4b"  target="_blank"  rel="nofollow">Java new一个Object对象占用多少内存？</a></li> </ol> <h4 id="对象锁">对象锁</h4> <p>包括方法锁(默认锁对象为this,当前实例对象)和同步代码块锁(自己指定锁对象)。</p> <h5 id="方法锁形式">方法锁形式</h5> <p><code>synchronized</code>修饰普通实例方法，锁对象默认为this</p> <pre><code class="language-java">public synchronized void method() {     // CODE } </code></pre> <h5 id="代码块形式">代码块形式</h5> <p>手动指定锁定对象，可以是<code>this</code>，也可以是其他对象</p> <pre><code class="language-java">synchronized (obj) { // obj可以为this或其他对象     // CODE } </code></pre> <h4 id="类锁">类锁</h4> <p>指<code>synchronized</code>修饰静态的方法或指定锁对象为<code>Class</code>对象。这种情况下，所有对象共用一把锁。</p> <h5 id="静态方法形式">静态方法形式</h5> <pre><code class="language-java">public static synchronized void method() {     // TODO } </code></pre> <h5 id="代码块形式-1">代码块形式</h5> <pre><code class="language-java">synchronized (classA.class) {     // TODO  } </code></pre> <h4 id="参考资料-1">参考资料</h4> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pdai.tech/md/java/thread/java-thread-x-key-synchronized.html#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3synchronized"  target="_blank"  rel="nofollow">关键字: synchronized详解</a></p> <h3 id="17-线程安全封装安全输出类">1.7 线程安全——封装安全输出类</h3> <p>指导书中提示到，官方提出的输出包<strong>线程不安全</strong>，即，获得时间戳和输出不是原子操作，可能出现时间戳和输出内容不匹配的情况。经过lxh助教的提示，我们有以下两种思路处理这个问题。</p> <h4 id="每次调用加锁">每次调用加锁</h4> <p>第一种思路，我们可以在每次调用的时候都加锁，这样可以解决上述问题。得益于我们本次作业的输出较为简单，所以这样也不会显得很麻烦，但是当我们要包装为“原子操作”的类方法很多时，或者，祖传代码很长而我们只知道方法的接口的时候，可能会比较麻烦，以下介绍第二种方法。</p> <h4 id="封装输出类">封装输出类</h4> <h5 id="单例模式">单例模式</h5> <p>关于单例模式介绍，可以参考<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.runoob.com/design-pattern/singleton-pattern.html"  target="_blank"  rel="nofollow">菜鸟教程-单例模式</a></p> <h5 id="封装">封装</h5> <p>利用单例模式，我们可以设计一个安全输出类，这个类只有一个对象，提供的方法的参数同我们想要使线程安全的类的方法的参数完全相同，并使方法为<code>synchronized</code>的，这样就可以保证每次调用同一个全局对象的方法，且是线程安全的。</p> <p>CODE:</p> <pre><code class="language-java">import com.oocourse.TimableOutput;  public class OutputThread {      private static OutputThread outputThread = new OutputThread();      private OutputThread(){}      public static OutputThread getInstance() {         return outputThread;     }      public synchronized void println(String msg) {         TimableOutput.println(msg);     } } </code></pre> <p>Tip：构建上述<code>OutputThread</code>类后，我们仍需要在<code>MainClass</code>开头调用<code>TimableOutput.initStartTimestamp();</code>。</p> <h5 id="化简">化简</h5> <p>实际上，为了使方法更具有普适性（适应要封装为线程安全类的类有较多方法）以及应用完整的单例模式，上述代码在本例中略显冗余，可以如下化简：</p> <pre><code class="language-java">import com.oocourse.TimableOutput;  public class OutputThread {     public synchronized void println(String msg) {         TimableOutput.println(msg);     } }  </code></pre> <h2 id="part-2-第六次作业">Part 2 第六次作业</h2> <h3 id="21-作业要求">2.1 作业要求</h3> <p>模拟实现支持五座楼，每座十层，每座有一台基础电梯可以在本座所有楼层间运行，支持加装可在所有不同楼座同一层间运行的电梯，支持加装纵向电梯的多线程实时电梯系统。</p> <p>与第五次作业相比，本次作业的迭代要求为：</p> <ul> <li>支持加装可在所有楼座运行的横向电梯</li> <li>支持加装可在所有楼层运行的纵向电梯</li> <li>支持同一层不同楼座的乘客需求</li> </ul> <h3 id="22-架构设计">2.2 架构设计</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/c2c3827bf46d815de2c87ab9ed4cecb1.jpg" alt="「BUAA OO Unit 2 HW8」第二单元总结_在线工具"></p> <p>第六次作业UML类图如上图示。</p> <p>本次作业基于第五次作业迭代而来，没有进行大规模重构，因此主要介绍<strong>设计思路和迭代变化</strong>。</p> <h4 id="新需求分析">新需求分析</h4> <p>第二次作业的变化主要包括：增加横向电梯种类并支持在同楼层不同座之间的乘客需求和支持动态增加（纵向和横向）电梯数量。</p> <p>对于第一个需求，我们秉持开闭原则，增设<code>Elevator</code>父类，纵向电梯<code>ElevatorCol</code>和横向电梯<code>ElevatorRow</code>分别继承它，只需在子类重写<code>run</code>方法即可。</p> <p>对于第二个需求，我们采用工厂模式，通过<code>ElevatorFactory</code>生产具有我们需要的功能的电梯。</p> <h4 id="请求群">请求群</h4> <p>对于同楼座（层），我们首先定义<strong>请求群</strong>的概念，一个请求群内的所有请求对该群内的所有电梯均可视（即电梯都有接到该请求的能力），群内所有电梯都可接待所有请求。</p> <h4 id="类虚拟空间">类虚拟空间</h4> <p>同时，为了简化调度负担及结构复杂度，我们借用OS中<strong>虚拟空间</strong>的思路。</p> <p>对于群内的电梯，其可视所有请求，并且不认为有其他电梯，这样即可不更改第一次电梯中的LOOK策略，并便于应用自由竞争的调度策略，这将在下一部分简述。同时，通过类<strong>物理空间</strong>的理念，我们通过请求是否被真实满足来避免产生冲突，保证了架构的安全性。</p> <h4 id="设计的核心理念">设计的核心理念</h4> <p>正确性、易维护性和可迭代性是我们架构设计的核心思想，秉持<code>less is more</code>的思路，我们尽可能在逻辑上简化调度策略，在实现难度和迭代维护难度与性能方面做取舍平衡，最终选择LOOK和自由竞争的策略。</p> <h4 id="读写锁">读写锁</h4> <p>在上述介绍中，电梯们对于所属请求群内的候乘表读相比写更频繁，可以采用读写锁来进一步优化提升性能。</p> <p>但是在实际验证中，我们发现读写锁对于性能提升非常有限，甚至在数据波动时反而会劣于<code>synchronized</code>。为了便于迭代和维护，最终我们仍选择全部使用<code>synchronized</code>实现，这是一种在架构鲁棒性和相对高性能之间的取舍。</p> <h3 id="23-协作图">2.3 协作图</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/a8d5ed10412300d716040f857111c601.jpg" alt="「BUAA OO Unit 2 HW8」第二单元总结_在线工具"></p> <p>如上图示为本次作业协作图。</p> <p>可以注意到，本次作业和第五次作业相比，设计和迭代是线性的，没有改变架构和思路，这体现了我们架构较为优越的可扩展性和鲁棒性。</p> <h3 id="24-调度分析">2.4 调度分析</h3> <h4 id="横向look">横向LOOK</h4> <p>纵向LOOK在<strong>Part1 第五次作业 1.4调度分析</strong>中已经介绍过，这里主要介绍横向LOOK：</p> <ol> <li> <p>当电梯有乘客时，依然希望寻找其中目标楼座距离当前楼座最远的请求为主请求，但是这里的距离不应该是简单的加减法，可以加上模运算（注意若出现负数直接取模不符合我们的要求）：</p> <pre><code class="language-java">dis = (target - nowBuilding + 5) % 5; </code></pre> </li> <li> <p>当电梯没有乘客时，原则上仍然按照第一次的方法寻找，只是如果第一次向上的尽头是10层，这一次顺时针尽头应该变为 <code>(now + 2) % 5；</code>向下的尽头是1层，这一次逆时针尽头应该变为<code>(now - 2 + 5) % 5</code>。</p> </li> </ol> <p>LOOK的性能在随机大数据中有较好的表现，同时易于实现。</p> <h4 id="自由竞争">自由竞争</h4> <p>上文中，我们介绍了请求群和虚拟空间的想法，在这基础上，我们介绍自由竞争的具体实现。</p> <p>对于每台电梯（无论横纵），其均按照自己的LOOK进行调度运行；当其在访问本请求群内的请求时，不会考虑别的电梯是否正在前往其中某个请求，而只考虑是否满足自己的调度来运行。这样，我们只需要在电梯arrive每层的时候访问请求群内的请求即可，若其接到了请求，则在请求群内移除；若某格请求被其他电梯接走，而其事实上是使本电梯运行的动力，那么至多付出一层的代价，本电梯就会重新访问请求群并基于LOOK获得新的运行方向。</p> <p>上述设计较为精简，在面对大数据时表现均衡；同时，省去了中央调度的设计，类分布式的思路使得电梯自行运动而无需被指派任务；并且对电梯数量没有任何限制，覆盖了作业要求的15部要求。</p> <h3 id="25-bug分析">2.5 bug分析</h3> <h4 id="自己bug-1">自己bug</h4> <p>本次作业在中测、强测和互测中没有出现bug。最终得分为96.2015，可以看到性能分得分优于上次，我认为这是自由竞争策略的优势。尽管得分不高，但是本次作业遵循了鲁棒性和可扩展性的要求，这为后续迭代开发和维护带来了便利。</p> <p>但是在中测的前几次提交以及本地评测姬随机测试中出现了一些bug，以下分别介绍：</p> <h5 id="空开关门">空开关门</h5> <p>空开关门指的是，在自由竞争的模式下，多个电梯奔向同一个请求，在极小的时间内开门，但是人只进了一个电梯，而没得到人的电梯便会再关门，此即空开关门。事实上，这并不算错误，但是会严重影响性能<s>和观感</s>。</p> <p>这个问题算是自由竞争模式下的典型问题。解决办法是：将判断有人可以进和真正将人放入封装为原子操作。具体来讲，在判断当前楼层是否需要开门时，一旦判定有人可以接待，便直接将其从waitTable取走，在open后再真正将人in进来。得益于这样的设计以及锁的特性，不会存在多部电梯同时访问到一个请求从而判断自己可以开门而造成错误。</p> <h4 id="别人bug-1">别人bug</h4> <p>本次作业共成功hack7次，分别是三位同学的bug。评测方法主要是评测机随机测试。</p> <h5 id="忘记关门">忘记关门</h5> <p>有一位同学忘记关门，应该是迭代时只改了纵向没改横向。</p> <h5 id="rtle">RTLE</h5> <p>有两位同学的电梯会在某些数据下在楼层间反复横跳，最终RTLE。有趣的是，其中一位同学的这个bug并不能稳定复现，该数据点交上去复测若干次才最终hack到。</p> <p>可以看出，随机数据测试具有一定可靠性，在读代码找bug困难时不失为一种好的选择。</p> <h2 id="part-3-第七次作业">Part 3 第七次作业</h2> <h3 id="31-作业要求">3.1 作业要求</h3> <p>模拟实现支持五座楼，每座十层，每座有一台基础纵向电梯可以在本座所有楼层间运行，一层有一台可达全部楼座的中转横向电梯，支持加装可在同一层间运行的横向电梯，支持加装纵向电梯，支持电梯包括速度、容量在内的自定义属性，支持横向电梯可达楼座的自定义属性，支持起点终点间楼座不同楼层不同请求的换成需求的多线程实时电梯系统。</p> <p>与第六次作业相比，本次作业的迭代要求为：</p> <ul> <li>支持所有电梯自定义速度和容量属性</li> <li>支持横线电梯自定义可达楼座属性</li> <li>一层加装可达全部楼座的中转横向电梯</li> </ul> <h3 id="32-架构设计与新需求分析">3.2 架构设计与新需求分析</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/f5456d440b2f1c39703ae6dd98389359.jpg" alt="「BUAA OO Unit 2 HW8」第二单元总结_在线工具"></p> <p>本次作业架构设计如上图示。可以看出，整体结构基本没有发生变化，只为部分类增加部分内容。</p> <h4 id="支持自定义属性">支持自定义属性</h4> <p>只需要在电梯类内部新增属性即可。</p> <h4 id="支持自定义可达楼座">支持自定义可达楼座</h4> <p>通过公式<code>((M &gt;&gt; (P -'A')) &amp; 1) + ((M &gt;&gt; (Q -'A')) &amp; 1) == 2</code>判断是否可达即可。</p> <p>值得注意的是，在支持自定义可达楼座后，<strong>同一层的横向电梯应当所属不同的<code>WaitTable</code></strong>。</p> <p>举例而言，一个可达A和E的五楼横向电梯与一个可达A和B的五楼横向电梯对于需求为A-5 -&gt; E-&gt;5的请求的处理应当是不同的，<strong>不满足起点终点楼座均可达的请求不应当被电梯“看到”</strong>，这也是笔者的一个重要bug，将在后面介绍。</p> <h4 id="支持换乘">支持换乘</h4> <p>需要对请求进行划分，对于一般的请求而言，需要“三段式”，即From Floor From Building -&gt; From Building Middle Floor ; From Building Middle Floor -&gt; To Building Middle Floor ; To Building Middle Floor -&gt; To Building To Floor。</p> <p>具体到策略，有静态分配和动态分配两种。静态分配即请求从输入线程获得时就已经划分好；动态分配即每次规划一段路，规划下一段时要重新计算。</p> <p>从可扩展性、和性能方面看，动态分配优于静态分配，但综合实现难度、优化程度以及鲁棒性，我最终选择较为容易实现的静态分配方法。</p> <h3 id="33-协作图">3.3 协作图</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/dec9196597b88bbb1406e68af847a9c0.jpg" alt="「BUAA OO Unit 2 HW8」第二单元总结_在线工具"></p> <p>如上图示为本次作业协作图。</p> <p>可以注意到，本次作业和第六次作业相比，设计和迭代是线性的，没有改变架构和思路，这体现了我们架构较为优越的可扩展性和鲁棒性。</p> <p>我们主要扩展了分段请求在没有真正完成时要再次加入<code>WaitTable</code>重新等待电梯运送。</p> <h3 id="34-调度分析">3.4 调度分析</h3> <p>本次作业中沿用了第六次作业的纵向与横向LOOK以及自由竞争算法，整体思路没有变化。</p> <p>值得一提的是，对于横向电梯，其在计算候乘表中请求时需要先额外考虑是否起点和终点均可达，若不满足，则忽视该请求。</p> <h3 id="35-bug分析">3.5 bug分析</h3> <h4 id="自己bug-2">自己bug</h4> <p>本次作业在中测、强测和互测中没有出现bug。最终得分为93.7454，可以看到性能分不高，我认为这是朴素调度的劣势。尽管得分不高，但是本次作业遵循了鲁棒性和可扩展性的要求，这为后续迭代开发和维护带来了便利。</p> <p>但是在中测的前几次提交以及本地评测姬随机测试中出现了一些bug，以下分别介绍：</p> <h5 id="ctle">CTLE</h5> <p>前置背景：<code>setEnd()</code>是输入线程结束时给所有<code>WaitTable()</code>设置<code>end</code>布尔值为真的方法；<code>isEnd()</code>是<code>WaitTable</code>提供的查询<code>end</code>布尔值是否为真的方法。</p> <p>在本次作业中，出现了较为严重的CTLEbug。具体而言，是多部电梯的判断<code>wait</code>的条件中的<code>isEnd()</code>等方法中有<code>notifyAll()</code>，这意味着如果目前有两台电梯，但是没有请求，第一部电梯判断条件满足进入<code>wait</code>，但是其判断过程中唤醒了正在<code>wait</code>的第二部电梯，这样彼此唤醒最终导致CTLE。</p> <p>解决办法：只设置和保留必要的<code>notifyAll()</code>。</p> <p>究其本源，我们在前两次作业的<code>setEnd()</code>方法中设置<code>notifyAll()</code>是为了唤醒并结束候乘表空、电梯空且电梯<code>wait</code>的线程；<code>isEnd()</code>方法是为了保证电梯在运行的循环节开头每次可以判断是否输入已经结束，如果输入结束、候乘表空且电梯内人员运送完毕，即可结束线程。</p> <p>因此，我们发现，其实<code>isEnd()</code>方法并不需要<code>notifyAll()</code>，经过这样的分析论证，我们删去了许多赘余的<code>notifyAll()</code>，最终强测所有数据点的CPU时间均在2.5s以下。</p> <h5 id="线程结束">线程结束</h5> <p>在本次作业中，线程结束是一个易出锅的地方：尽管输入结束、当前候乘表空、当前电梯空，但这并不意味可以结束该电梯线程，因为可能其他电梯会将未处理完的请求重新置入本候乘表。</p> <p>解决办法：设置<code>Counter</code>类，作为单例模式对已输入请求和完全处理结束请求计数，取代输入线程结束的<code>setEnd()</code>方法和信号。</p> <h3 id="别人bug-2">别人bug</h3> <p>本次作业共成功hack9次，分别是两位同学的bug。评测方法主要是评测机随机测试。</p> <h5 id="rtle-1">RTLE</h5> <p>和第六次作业类似的bug，面对较为有压力的数据会超时。</p> <p>另外有一位同学的bug最终没有能够复现，他实现了模拟电梯运行过程，自行计算时间来缩短IO的影响，但是会在某些情况产生开关门时间不足等情况，不过课程组评测姬没有复现也就无所谓了。</p> <h2 id="part-4-多线程心得体会">Part 4 多线程心得体会</h2> <h3 id="多线程基本原理">多线程基本原理</h3> <p>本单元中，最重要的收获是迈出了多线程从0到1的这一步。在本单元学习之前，我仅仅从概念上对多线程有一些朴素的认识，但经过本单元的理论课、实验课研讨课以及作业的短平快训练，我已经能够初步认识、设计和实现简单的多线程逻辑。</p> <h3 id="多线程debug">多线程debug</h3> <p>多线程会有一些单线程不会出现的问题，比如轮询、死锁等，我在作业中也出现过轮询等问题，在老师、助教和同学们的无私帮助下一步一步解决了在这些问题并有所长进。</p> <h3 id="多线程思维">多线程思维</h3> <p>本单元的电梯问题是一个经典的多线程问题，并且其<strong>没有最优调度</strong>的特点让我们能够更好地离开固有的单纯计算和查找最优解的思路，我们在真实<strong>工程</strong>需求中可能往往只需要一个局部最优解和一个“看起来性能达标”的策略即可以不差的性能满足设计要求。而在这之上，我们更多地需要考虑架构和设计层面的问题，不能为了性能上的“蝇头小利”开架构的倒车，放弃了对可迭代性、可维护性和鲁棒性的要求。</p> <p>当然，以上只是个人浅见，事实上算法等领域依然有非常值得探索和研究的课题，不过对于工程来说，或许有时需要做一些取舍。</p> <h3 id="线程安全封装">线程安全封装</h3> <p>本单元作业中有一个有趣的点：课程组提供的输出类是不安全的。从这个角度我窥得大型工程开发的一角：绝大多数时候我们不可能从头开发或者直接重构一个已经安全运行多年的大型项目，而这时候我们会面临在这基础上迭代开发的需求。SOLID原则告诉我们，对于已经久经考验、安全运行的代码最好不要做任何改动，而一些祖传的代码或许并不支持多线程，因此我们需要将其封装为线程安全的。</p> <p>这一部分荣文戈老师在理论课上曾有介绍，即，将不安全的部分Wrapper一下，就变得安全了。而在课下作业中，通过请教林星涵助教，我具体明白了荣老师上课所说的Wrapper的含义，相关内容汇总为一篇帖子发在讨论区中并得到加精，这也让我非常开心。</p> <h2 id="part-5-tricks">Part 5 Tricks</h2> <p>在本单元作业实现中，有一些<s>不怎么高级的</s>小技巧<s>但很有用</s>，在这里记录和分享。</p> <h3 id="数据投喂包使用批处理代替手动输入cmd命令">数据投喂包使用批处理代替手动输入cmd命令</h3> <p>使用数据投喂包测试时每次在命令行输入<code>datainput_student_win64.exe | java -jar code.jar</code>较为繁琐，在Windows中可以通过写bat文件后每次双击来代替重复输入命令的操作。</p> <h4 id="runbat"><code>run.bat</code></h4> <pre><code class="language-shell">datainput_student_win64.exe | java -jar code.jar pause </code></pre> <p>直觉上比较类似sh脚本文件。第二行<code>pause</code>的作用是运行完之后不退出命令行界面。</p> <p>用记事本等编辑器写好上述文件后，双击<code>run.bat</code>即可运行。</p> <p>脚本最后一行若再加上<code>cmd \k</code>能让命令行界面可以继续使用。</p> <h3 id="随机数据评测机">随机数据评测机</h3> <p>在多线程单元，随机数据评测机依旧发挥稳定，虽然不太能构造出极端样例卡RTLE等，但是对于广域压力测试可靠性效果显著，这也帮助我在第六、七次作业成功hack了多位同学。</p> <h3 id="plantuml绘图">plantUML绘图</h3> <p>在本次作业中需要绘制协作图，processOn和starUML固然是很好的选择，但是plantUML为我们提供了利用代码生成虽然不那么个性化和精细化但是很达标的快速绘制协作图的方法，可以参考这两篇文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/427358291"  target="_blank"  rel="nofollow">PlantUML画图软件简介</a>和<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://plantuml.com/zh/"  target="_blank"  rel="nofollow">PlantUML简述</a>。</p> <h2 id="part-6-回顾与展望">Part 6 回顾与展望</h2> <p>第二单元以实时交互电梯问题为载体，通过短平快的三次迭代作业让曾是多线程小白的我快速上手多线程，完成从0到1的改变，在此再次感叹课程组设计的精妙并表达由衷的感谢。</p> <p>本单元作业较往年主要新增了横向电梯的需求，尽管乍一看来非常吓人，但只要多思考多讨论，便也不是不可跨越的难关。</p> <p>不同于第一单元，本单元中我始终没有重构。尽管重构是改善代码质量的重要方法，但是基于已经成熟的，经过考验的架构迭代开发显然可以避免相当多无谓的bug，这也是一种取舍和平衡。</p> <p>尽管在第一单元的展望中我希望不要拖ddl，但是第七次作业还是直到中测截止前2h才最终定稿，依旧非常惊心动魄，希望未来可以尽可能调度好个人时间和安排，尽量避免这种情况。</p> <p>在本单元作业中，老师、助教和同学们给予了我非常大的帮助，可以说没有大家的帮助，我不可能完成这一单元的任务，再一次向大家表示由衷的感谢。另外，我也更深层地体会到了合作、讨论和有效沟通的重要性。在一年级时，我很少会和大家讨论和分析代码相关任务，一般单打独斗就走下来了，但是二年级的计组和OOOS让我更深一步体会合作的重要性，希望在未来可以继续和大家一起讨论，一起进步。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-67051.htm">TensorFlow之张量的形状相关操作</a></p>
                                        <p>下一个：<a href="/news/article-67695.htm">哪家动物医院好（哪家动物医院好一点）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-62141.htm" title="c++引用折叠">c++引用折叠</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-7-hiddify-next-github.htm" title="1月7日 | HiddifyNextNode机场节点订阅每天更新22.7M/S免费节点订阅链接">1月7日 | HiddifyNextNode机场节点订阅每天更新22.7M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-1-node-share.htm" title="2月1日 | HiddifyNextNode机场节点订阅每天更新18.9M/S免费节点订阅链接">2月1日 | HiddifyNextNode机场节点订阅每天更新18.9M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-46447.htm" title="58同城土狗领养（58同城宠物店领养）">58同城土狗领养（58同城宠物店领养）</a></li>
                        <li class="py-2"><a href="/news/article-52034.htm" title="JavaScript从数组中删除相同的条目，并保持其长度相同方法详解">JavaScript从数组中删除相同的条目，并保持其长度相同方法详解</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-5-today-hiddify-next-node.htm" title="2月5日 | HiddifyNextNode机场节点订阅每天更新22.5M/S免费节点订阅链接">2月5日 | HiddifyNextNode机场节点订阅每天更新22.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-54168.htm" title="es6操作数组方法">es6操作数组方法</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-16-free-node-subscribe.htm" title="1月16日 | HiddifyNextNode机场节点订阅每天更新22.8M/S免费节点订阅链接">1月16日 | HiddifyNextNode机场节点订阅每天更新22.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-20-latest-hiddify-next-node.htm" title="2月20日 | HiddifyNextNode机场节点订阅每天更新19.9M/S免费节点订阅链接">2月20日 | HiddifyNextNode机场节点订阅每天更新19.9M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-36559.htm" title="宠物零食加工厂都需要什么执照（宠物零食加工需要什么资质）">宠物零食加工厂都需要什么执照（宠物零食加工需要什么资质）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">21</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!--//tabs-faqs-->
    
        <!-- footer -->
    <section class="w3l-footer-29-main">
        <!-- copyright -->
        <section class="w3l-copyright text-center">
            <div class="container">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="copy-footer-29">HiddifyNextNode免费节点官网 版权所有 Powered by WordPress</p>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                <span class="fas fa-arrow-up"></span>
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- /move top -->
        </section>
        <!-- //copyright -->
    </section>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- Template JavaScript -->
    <script src="/assets/website/js/frontend/hiddifynextnode/jquery-3.3.1.min.js"></script>
    <script src="/assets/website/js/frontend/hiddifynextnode/theme-change.js"></script>
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["Creative Agency", "Digital Marketing", "Brand Identity"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <script src="/assets/website/js/frontend/hiddifynextnode/jquery-1.9.1.min.js"></script>
    <!-- faq -->
    <script>
    const items = document.querySelectorAll(".accordion button");

    function toggleAccordion() {
        const itemToggle = this.getAttribute('aria-expanded');

        for (i = 0; i < items.length; i++) {
            items[i].setAttribute('aria-expanded', 'false');
        }

        if (itemToggle == 'false') {
            this.setAttribute('aria-expanded', 'true');
        }
    }

    items.forEach(item => item.addEventListener('click', toggleAccordion));
    </script>
    <!-- //faq -->
    <script src="/assets/website/js/frontend/hiddifynextnode/circles.js"></script>
    <!-- owlcarousel -->
    <script src="/assets/website/js/frontend/hiddifynextnode/owl.carousel.js"></script>
    <!-- script for banner slider-->
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: false,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1
                },
                480: {
                    items: 1
                },
                667: {
                    items: 1
                },
                1000: {
                    items: 1
                }
            }
        })

        $('.owl-carousel .owl-dots, .owl-carousel .owl-nav').hide();
    })
    </script>
    <!-- //script -->
    
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/website/js/frontend/hiddifynextnode/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!-- //bootstrap -->
    <script src="/assets/website/js/frontend/hiddifynextnode/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>